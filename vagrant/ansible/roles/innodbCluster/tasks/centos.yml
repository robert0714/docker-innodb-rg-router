- name: Configuring InnoDB Cluster
  shell:  mysqlsh --file /tmp/configureInstance.js  
  tags: [mysql]  
  
- name: hostname.stdout.find('mysql-1') 
  debug:
    msg: "  {{ hostname.stdout.find('mysql-1')  }} " 
  tags: [mysql]  
  
- name: hostname.stdout.find('mysql-3') 
  debug:
    msg: "  {{ hostname.stdout.find('mysql-3')  }} "   
  tags: [mysql]
  
  

# - name:  Create replication user
#   mysql_user: 
#      name: "{{ mysql_rep_user }}"
#      password: "{{ mysql_rep_pass }}"
#      priv: "{{ mysql_rep_priv }}"
#      host: '%'
#      state: present
#   when: master is defined
#   tags: [mysql]





# - name: replication group - Flush
#   shell: mysql --defaults-file=/root/.my.cnf -e "FLUSH PRIVILEGES";  mysql --defaults-file=/root/.my.cnf -e "FLUSH TABLES WITH READ LOCK";
#   when: master is defined
#   tags: [mysql]

# - name: Replication-group -  performance_schema.replication_group_members status ?
#   shell: mysql -uroot   -Bse "SELECT * FROM performance_schema.replication_group_members\G;" | grep MEMBER_STATE | awk '{print $2}'
#   register: rg_status
#   tags: [mysql]

# - name: Replication-group -  PLUGIN group_replication exist ?
#   shell: mysql -uroot   -Bse "SHOW PLUGINS;" | grep group_replication | awk '{print $2}'
#   register: plugin_status
#   tags: [mysql]

# - name: display rg_status[1]
#   debug:
#     msg: "  {{ rg_status }} "  
#   tags: [mysql]

# - name: display rg_status[2]
#   debug:
#     msg: "  {{ rg_status.stdout.find('ONLINE') }} "  
#   tags: [mysql]


# - name: mysql service is restarted in order to install group_replication plugin
#   service:
#     name: mysqld
#     state: restarted
#   when:   rg_status.stdout.find('ONLINE')  == -1
#   tags: [mysql]
  
# - name: Replication-group - INSTALL PLUGIN group_replication
#   shell: mysql -uroot   -Bse "INSTALL PLUGIN group_replication SONAME \"group_replication.so\" ;"
#   when : plugin_status.stdout.find('ACTIVE')  == -1  
#   tags: [mysql]


# - name: Replication-group - Configure the recovery credentials
#   shell: mysql -uroot  -Bse  "CHANGE MASTER TO MASTER_USER=\"{{ mysql_rep_user }}\", MASTER_PASSWORD=\"{{ mysql_rep_pass }}\"  FOR CHANNEL \"group_replication_recovery\";"
#   tags: [mysql]

# - name: display host_var
#   debug:
#     msg: "  {{ hostvars[groups['mysql'][0]]['repl_local_address'] }}   "  
#   tags: [mysql]


# - name: Replication-group -  Master start in  group_replication  
#   shell: mysql -uroot   -Bse "SET GLOBAL group_replication_bootstrap_group=ON; START GROUP_REPLICATION; SET GLOBAL group_replication_bootstrap_group=OFF; " 
#   register: master_node_
#   when: " master is   defined    and   rg_status.stdout.find('ONLINE')  == -1 "
#   tags: [mysql]



# - name: Replication-group -  Slave start in  group_replication  
#   shell: mysql -uroot   -Bse "RESET MASTER; START GROUP_REPLICATION;  " 
#   register: master_node_
#   when: "  master is not  defined and   rg_status.stdout.find('ONLINE')  == -1    "
#   tags: [mysql]



 
# - name:  To provide read/write access to the cluster for ProxySQL, add this user on one of the Percona XtraDB Cluster nodes
#   become: false
#   mysql_user: 
#       name: "{{ proxysql_user }}"
#       password: "{{ proxysql_user_passwd }}"
#       priv: '*.*:ALL,GRANT' 
#       host: "{{ item }}"
#       state: present 
#   with_items:
#      - "{{ ansible_hostname }}"
#      - 127.0.0.1
#      - ::1
#      - localhost
#      - '%'
#   ignore_errors: yes
#   tags: [mysql]
 

